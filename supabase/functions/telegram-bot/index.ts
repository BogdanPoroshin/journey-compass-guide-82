
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { supabaseClient } from "../_shared/supabase-client.ts";

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_BOT_TOKEN");
const WEBHOOK_URL = `https://mobwtghjbdovunfbzyvy.functions.supabase.co/telegram-bot`;

// –ë–∞–∑–æ–≤—ã–π URL API Telegram
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

// CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–∑–æ–≤–∞ –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type, x-action",
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendMessage(chat_id: number, text: string, parse_mode = "HTML") {
  try {
    const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id,
        text,
        parse_mode,
      }),
    });
    
    return await response.json();
  } catch (error) {
    console.error("Error sending message:", error);
    return { ok: false, error };
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-3 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
async function getTopRoutes() {
  try {
    const { data, error } = await supabaseClient
      .from('routes')
      .select(`
        id,
        title,
        description,
        duration,
        difficulty_level,
        reviews(rating)
      `)
      .is('is_public', true)
      .limit(3);
    
    if (error) throw error;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    const routesWithRating = data.map(route => {
      const reviews = route.reviews || [];
      const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
      const avgRating = reviews.length > 0 ? totalRating / reviews.length : 0;
      
      return {
        ...route,
        rating: avgRating,
        review_count: reviews.length
      };
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    return routesWithRating.sort((a, b) => b.rating - a.rating);
  } catch (error) {
    console.error("Error fetching top routes:", error);
    return [];
  }
}

// –ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
async function searchRoutes(query: string) {
  try {
    const { data, error } = await supabaseClient
      .from('routes')
      .select(`
        id,
        title,
        description,
        duration,
        difficulty_level
      `)
      .is('is_public', true)
      .or(`title.ilike.%${query}%,description.ilike.%${query}%`)
      .limit(5);
    
    if (error) throw error;
    return data;
  } catch (error) {
    console.error("Error searching routes:", error);
    return [];
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ –ø–æ ID
async function getRouteById(routeId: string) {
  try {
    const { data, error } = await supabaseClient
      .from('routes')
      .select(`
        *,
        categories:route_categories(categories(*)),
        creator:users!routes_creator_id_fkey(*),
        reviews(rating)
      `)
      .eq('id', routeId)
      .single();
    
    if (error) throw error;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    const reviews = data?.reviews || [];
    const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
    const avgRating = reviews.length > 0 ? totalRating / reviews.length : 0;
    
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    const categories = data?.categories?.map(item => item.categories) || [];
    
    return {
      ...data,
      categories,
      rating: avgRating,
      review_count: reviews.length
    };
  } catch (error) {
    console.error("Error fetching route by ID:", error);
    return null;
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
function formatRouteInfo(route) {
  const stars = "‚≠ê".repeat(Math.round(route.rating || 0));
  const difficultyEmoji = {
    "Easy": "üü¢",
    "Moderate": "üü°",
    "Hard": "üü†",
    "Extreme": "üî¥"
  };
  
  const difficulty = route.difficulty_level 
    ? `${difficultyEmoji[route.difficulty_level] || "‚ùì"} ${route.difficulty_level}` 
    : "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
  
  return `<b>${route.title}</b>\n\n` +
    `üìù ${route.description.substring(0, 100)}${route.description.length > 100 ? '...' : ''}\n\n` +
    `‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${route.duration} –¥–Ω–µ–π\n` +
    `${difficulty}\n` +
    `${stars} (${route.review_count || 0} –æ—Ç–∑—ã–≤–æ–≤)\n\n` +
    `üÜî ${route.id}`;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async function handleCommand(message) {
  const chatId = message.chat.id;
  const text = message.text || '';
  
  if (text.startsWith('/start')) {
    return sendMessage(
      chatId, 
      `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π. üåç‚úàÔ∏è\n\n` +
      `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
      `/popular - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã\n` +
      `/search [–∑–∞–ø—Ä–æ—Å] - –ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤\n` +
      `/route [id] - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–∞—Ä—à—Ä—É—Ç–µ`
    );
  }
  
  else if (text.startsWith('/popular')) {
    const topRoutes = await getTopRoutes();
    
    if (topRoutes.length === 0) {
      return sendMessage(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã.");
    }
    
    let response = "<b>üèÜ –¢–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤:</b>\n\n";
    
    for (const route of topRoutes) {
      response += formatRouteInfo(route) + "\n\n";
    }
    
    response += "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /route [id]";
    
    return sendMessage(chatId, response);
  }
  
  else if (text.startsWith('/search')) {
    const query = text.replace('/search', '').trim();
    
    if (!query) {
      return sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: /search –≥–æ—Ä—ã");
    }
    
    const routes = await searchRoutes(query);
    
    if (routes.length === 0) {
      return sendMessage(chatId, `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.`);
    }
    
    let response = `<b>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}":</b>\n\n`;
    
    for (const route of routes) {
      response += formatRouteInfo(route) + "\n\n";
    }
    
    response += "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /route [id]";
    
    return sendMessage(chatId, response);
  }
  
  else if (text.startsWith('/route')) {
    const routeId = text.replace('/route', '').trim();
    
    if (!routeId) {
      return sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –º–∞—Ä—à—Ä—É—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /route 123");
    }
    
    const route = await getRouteById(routeId);
    
    if (!route) {
      return sendMessage(chatId, `–ú–∞—Ä—à—Ä—É—Ç —Å ID ${routeId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }
    
    const stars = "‚≠ê".repeat(Math.round(route.rating || 0));
    const difficultyEmoji = {
      "Easy": "üü¢",
      "Moderate": "üü°",
      "Hard": "üü†",
      "Extreme": "üî¥"
    };
    
    const difficulty = route.difficulty_level 
      ? `${difficultyEmoji[route.difficulty_level] || "‚ùì"} ${route.difficulty_level}` 
      : "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    
    const categories = route.categories.map(cat => cat.name).join(", ") || "–ù–µ —É–∫–∞–∑–∞–Ω—ã";
    
    let response = `<b>${route.title}</b>\n\n` +
      `üìù ${route.description}\n\n` +
      `‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${route.duration} –¥–Ω–µ–π\n` +
      `${difficulty}\n` +
      `üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${route.estimated_cost ? route.estimated_cost + ' ‚ÇΩ' : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
      `üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categories}\n` +
      `${stars} (${route.review_count || 0} –æ—Ç–∑—ã–≤–æ–≤)\n` +
      `üë§ –ê–≤—Ç–æ—Ä: ${route.creator.username}\n`;
    
    return sendMessage(chatId, response);
  }
  
  else {
    return sendMessage(
      chatId, 
      `–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
      `/popular - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã\n` +
      `/search [–∑–∞–ø—Ä–æ—Å] - –ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤\n` +
      `/route [id] - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–∞—Ä—à—Ä—É—Ç–µ`
    );
  }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞
async function setWebhook() {
  try {
    const response = await fetch(`${TELEGRAM_API}/setWebhook?url=${WEBHOOK_URL}`);
    const data = await response.json();
    console.log("Webhook setup response:", data);
    return data;
  } catch (error) {
    console.error("Error setting webhook:", error);
    return { ok: false, error };
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
serve(async (req) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS –¥–ª—è preflight –∑–∞–ø—Ä–æ—Å–æ–≤
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
  if (!TELEGRAM_BOT_TOKEN) {
    return new Response(
      JSON.stringify({ error: "TELEGRAM_BOT_TOKEN is missing" }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ x-action
  const action = req.headers.get('x-action');
  
  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook - —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
  if (action === 'setup-webhook') {
    const result = await setWebhook();
    return new Response(
      JSON.stringify(result),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–æ–π –ª–∏ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON
    const contentLength = req.headers.get('content-length');
    if (!contentLength || parseInt(contentLength) === 0) {
      return new Response(
        JSON.stringify({ ok: true, message: "Empty request body" }),
        { headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }
  
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
      const update = await req.json();
      console.log("Received update:", JSON.stringify(update));
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
      if (update.message) {
        await handleCommand(update.message);
      }
    } catch (jsonError) {
      console.error("Error parsing JSON:", jsonError);
      return new Response(
        JSON.stringify({ ok: false, error: "Invalid JSON in request body" }),
        { headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }
    
    return new Response(JSON.stringify({ ok: true }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error("Error handling Telegram update:", error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});
